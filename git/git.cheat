% git 

# Set global git user name
git config --global user.name <name>

# Set global git user email
git config --global user.email <email>

# Shows a list of global parameters  
git config --list --show-origin

# Initializes a git repository
git init

# Add file contents to the index
git add <file>

# Shows various types of objects (trees, commits, blobs  and tags)
git show <options> <object...>

# Switch branches or restore working tree files
git checkout 

# Restore a past state of soft way
git checkout <commit> <file or without file>

# Return to the past hard, soft or bouth of them
git reset <commit> --hard, --soft o --mixed

# Delete files from git without delete it's VCS history
git rm 

# Delete files from our local repository and staging area, but hard drive keeps them 
git rm --cached

# Delete files from git and hard drive
git rm --force

# Removes files from staging area, but not to delete them. Just so the latest changes doesn't send to the last commit, unless we change our minds and include them again
git reset HEAD

# Renames the last commit (it is the HEAD)
git commit --amend

# Deletes the last commit, without changes. Fix and commit again
git reset HEAD~1 --soft

# Shows id and the title commit
git log --online

# Shows where it is the head point in the log.
git log --decorate

# Shows the number of lines that were changed
git log --stat

# Shows the number of lines that were changed and shows the changes on content
git log -p

# git shortlog
Identifies the commit made by the user. It shows the user and the commit titles

# A nice view of log
git log --graph --oneline

# Pretty format
git log --pretty="format:%H"

# Limits the number of commits by 3
git log -3

# Search commits by date after that
git log --after=<date>

# Search commits by date after that
git log --before=<date>

# Search commits by date after today
git log --after=<today>

# Search commits by author name
git log --author=<Name author>

# Search commits that match what is written
git log --grep=<text>

# Search commits that match what is written with case sensitive
git log --grep=<text> -i


